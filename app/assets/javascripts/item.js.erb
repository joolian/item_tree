$(document).ready(function(){
	
	$("#item_path").jBreadCrumb();
	
	$('#finder').jstree({
		"core" : {
			'data' : {
				'url' : "/items",
				'dataType' : 'json'
			},
			'check_callback' : function (operation, node, node_parent, node_position, more) {
			if (operation === "move_node"){
				// Can't create new root node
				if (node_parent.id === '#'){return false}
				// New parent must be a location
				//if (node_parent.li_attr.rel === 'location'){return true}
				//jsTree_node_properties(node_parent);
				if (node_parent.state.type === 'thing'){return false}
				return true;
			}
			// Can't copy node
			if (operation === "copy_node") {return false};
			},
			"themes" : { "stripes" : true,
				"name" : "default"
	 		}
		},
		'types' : {
			"root" : { "icon" : "<%= asset_path('root.png') %>"},
			"location" : {"icon" : "<%= asset_path('location.png') %>"},
			"thing" : { "icon" : "<%= asset_path('thing1.png') %>"},
		},
		'contextmenu' : {
			'select_node' : false,
			'items' : function(node) { 
				var tmp = $.jstree.defaults.contextmenu.items();
				tmp  = {
					'View': {
						'label' : 'View',
						'action' : function(data) {
							var inst = $.jstree.reference(data.reference);
							node_obj = inst.get_node(data.reference);
							window.location.href = node_obj.a_attr.href;					
						}					
					},
					'Edit': {
						'label' : 'Edit',
						'action' : function(data) {
							var inst = $.jstree.reference(data.reference);
							node_obj = inst.get_node(data.reference);
							window.location.href = node_obj.a_attr.href + "/edit";					
						}					
					},
					'AddItem' : {
						'label' : 'Add item',
						'action' : function(data) {
							var inst = $.jstree.reference(data.reference);
							node_obj = inst.get_node(data.reference);
							window.location.href = '/items/new?item_id=' + node_obj.id						
						}
					},
					'Open' : {
						'label' : 'Open',
						'action' : function(data) {
							var inst = $.jstree.reference(data.reference);
							node_obj = inst.get_node(data.reference);
							if (node_obj.type === "location"){
								$.ajax({
									type: 'Get', url: '/items/', dataType: 'json', data: { open_id: node_obj.id},
									success: function(newData) {
										$('#finder').jstree().settings.core.data = newData;
										$('#finder').jstree(true).refresh(true,true);
										update_breadcrumb(node_obj.id);
									}
								});						
							}					
						},
					}	
				}				
				if (node.type === 'thing') {
					delete tmp.AddItem; // Can only add an item to a location
					delete tmp.Open; // An thing has no children by definition
				};
				return tmp;
			}
		},
		
		"plugins" : [ "dnd", "types", "wholerow", "contextmenu" ]
	})
	.on('changed.jstree', function(e, data){
		// links to items#show for item. Ok for now, but will use this for different function later
		jsTree_node_properties(data.node);
		//window.location.href = data.node.a_attr.href;
		update_breadcrumb(data.node.id);
	})
	.on('move_node.jstree', function(e, data){
		//restrictions:
		// no copy on move, yet
		// no reorder (position > 0) as items will always be sorted
		// new parent must be a location
		// Can't move root if there is only one root, but will
		// need to add rule if we allow more than one root, such as when a subtree is opened.
		var moved = data.node.id;
		var moved_to = data.parent
		var position = 0
		//alert(data.position);
		var url = '/items/move_item';
		$.ajax({ type: 'GET', dataType: 'script', url: url,
			 data: {node_moved: moved, target_node: moved_to, position: position },
			 success: function(){ 
			 }
		});
	});
});

function update_breadcrumb(node_id) {
	$.ajax({
		type: 'Get', url: '/items/breadcrumb', dataType: 'script', data: { open_id: node_id},
		success: function() {
		}
	});		
}

function jsTree_node_properties(node) {
/* iterates through a jsTree node to display all properties */
/* pass data.node to function */
	$.each(node, function(name, value) {
		/*{ alert(name + " : "  + value) }*/
		{ console.log(name + " : "  + value) }
		if ($.type(value) == 'object')
			{ jsTree_node_properties(value) }
	});
}