// TODO Add copy, cut, paste. Need to make sure that store cut/copy data between tree refresh
//	otherwise will probably loose it
// TODO put 'Cannot delete' message in proper dialog
// TODO when adding an item: if the parent branch is not open, then open it
// TODO change styling of context menu
// TODO Implement Load all without easy loading
// TODO Update JStree version 1 form control for selecting an item, will need filter and branch pre-selection

$(document).ready(function(){
	//Change variable names and refactor
	$('#item_path').on( "click", "a", function(event) {
		event.preventDefault();
		var id = $(this).data('id');
		var root = $(this).data('root');
		getBranch(id, root);
	});
	
	$('#item_path').jBreadCrumb();
	
	$('#search').on('keyup', function() {
		var query = $(this).val();
		if (query.length >= 1 ){
			$('#finder').data('search', { on: true, query: query });
		}
		else {
			$('#finder').data('search', { on: false, query: "" });
		}
		$('#finder').jstree(true).refresh();
	});
	
	$('#finder').jstree({
		"core" : {
			'expand_selected_onload' : false,
			'data' : {
				'url' : function(node) {
					if ($('#finder').data('search').on === true) 
						{ return '/items/search' }
					else
						{ return node.id === "#" ? "/items" : "/items/children"; }
				},
				'data' : function (node) {
					if ($('#finder').data('search').on === true)
						{ return { query: $('#finder').data('search').query}}
					else {
						if (node.id === "#")
							{return {'root_id' : $("#finder").data("root_id"), 'show_root' : $("#finder").data("show_root")};
						}
						else {
							return {'id' : node.id};
						}
					}
				},
				'dataType' : 'json'
			},
			'check_callback' : function (operation, node, node_parent, node_position, more) {
				if (operation === "move_node"){
					// Can't create new root node
					if (node_parent.id === '#'){return false};
					// New parent must be a location
					if (node_parent.type === 'thing'){return false};
					// Can't change order
					if (node_parent.id === node.parent){return false};
				}
				// Can't copy node
				if (operation === "copy_node") {return false};
			},
			"themes" : { "stripes" : true,
				"name" : "default"
	 		}
		},
		"state" : { "key" : "state_demo" },
		'types' : {
			"organisation" : {"icon" : "fa fa-home fa-lg"},
			"location" : {"icon" : "fa fa-institution"},
			//"location" : {"icon" : "<%= asset_path('location.png') %>"},
			"thing" : { "icon" : "fa fa-dot-circle-o"}
		},
		'contextmenu' : {
			'select_node' : true,
			'items' : function(node) { 
				var tmp = $.jstree.defaults.contextmenu.items();
				tmp  = {
					'View' : {
						'label' : 'View',
						'icon' : 'fa fa-eye',
						'action' : function(data) {
							//get <a> DOMElement of node
							var inst = $.jstree.reference(data.reference);
							node_obj = inst.get_node(data.reference);
							window.location.href = node_obj.a_attr.href;					
						}					
					},
					'Edit' : {
						'label' : 'Edit',
						'icon' : 'fa fa-edit',
						'action' : function(data) {
							var inst = $.jstree.reference(data.reference);
							node_obj = inst.get_node(data.reference);
							window.location.href = node_obj.a_attr.href + "/edit";					
						}					
					},
					'Delete' : {
						'label' : 'Delete',
						'icon' : 'fa fa-trash',
						'action' : function(data) {
							var inst = $.jstree.reference(data.reference);
							node_obj = inst.get_node(data.reference);
							//if the node to delete is the only node then we wont be able set the node
							//in the call to updateBreadcrumb in the slect_node event. Therefore, need to get item path
							//in the controller.
							var select_parent = ( $("#finder").find("li").length === 1 );
							$.ajax({
								type: "POST",
								url: "/items/" + node_obj.id,
								dataType: "script",
								data: { "_method" : "delete", "select_parent" : select_parent },
								success: function(){
									inst.delete_node(node_obj);
								},
								error: function(){
									alert("Cannot delete item");
								}
							});	
						}
					},
					'AddItem' : {
						'label' : 'Add item',
						'icon' : 'fa fa-plus',
						'action' : function(data) {
							var inst = $.jstree.reference(data.reference);
							node_obj = inst.get_node(data.reference);
							window.location.href = '/items/new?item_id=' + node_obj.id						
						}
					},
					'Open' : {
						'label' : 'Open',
						'action' : function(data) {
							var inst = $.jstree.reference(data.reference);
							node_obj = inst.get_node(data.reference);
							if (node_obj.type != "thing"){
								getBranch(node_obj.id, false);	
							}					
						},
					}	
				}				
				if (node.type === 'thing') {
					delete tmp.AddItem; // Can only add an item to a location
					delete tmp.Open; // A thing has no children by definition
				};
				return tmp;
			}
		},
		"plugins" : [ "dnd", "types", "wholerow", "contextmenu", "state" ]
	})
	.on('delete_node.jstree', function( e, data ){
		var inst = data.instance;
		if ( inst.get_next_dom( data.node, true ) ) {
			inst.select_node( inst.get_next_dom( data.node, true ), true, true );
		}
		else if ( inst.get_prev_dom( data.node, true ) ) {
			inst.select_node( inst.get_prev_dom(data.node, true ), true, true );
			}
		else if ( data.node.parent != "#" ){
			inst.select_node( data.node.parent, true, true );
		}
	})
	.on('select_node.jstree', function(e, data){
		//jsTree_node_properties(data.node);
		updateBreadcrumb(data.node.id);
	})
	.on('move_node.jstree', function(e, data){
		//restrictions:
		// no copy on move, yet
		// no reorder (position > 0) as items will always be sorted
		// new parent must be a location
		// Can't move root if there is only one root, but will
		// need to add rule if we allow more than one root, such as when a subtree is opened.
		var moved = data.node.id;
		var moved_to = data.parent;
		var position = 0;
		var url = '/items/move_item';
		$.ajax({ type: 'GET', dataType: 'script', url: url,
			 data: {node_moved: moved, target_node: moved_to, position: position },
			 success: function(){ 
			 }
		});
	});
})

function getBranch(id, root) {
	$('#finder').data('search', { on: false, query: "" });
	$("#finder").data("root_id", id);
	$("#finder").data("show_root", root)
	$('#finder').jstree(true).refresh(false,true);
	updateBreadcrumb(id);
}

function updateBreadcrumb(node_id) {
	$.ajax({
		type: 'Get', url: '/items/breadcrumb', dataType: 'script', data: { root_id: node_id },
		success: function() {
		}
	});		
}

function jsTree_node_properties(node) {
/* iterates through a jsTree node to display all properties */
/* pass data.node to function */
	$.each(node, function(name, value) {
		{ console.log(name + " : "  + value) }
		if ($.type(value) == 'object')
			{ jsTree_node_properties(value) }
	});
}